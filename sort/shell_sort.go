package sort

// ShellSort 希尔排序 平均低于 O(n^2) 最坏还是会 O(n^2) 数据量小的时候很快
// 逐步分组进行粗调，再进行直接插入排序的思想
/*
	1.分组: 跨度是数组总长度的一半进行分组
	2.排序: 分组后的每组元素进行独立排序，使用插入排序
	3.把跨度缩小为原先的一半，重新进行分组(1)、排序 (2)
	4.重复 (3) 直到跨度为 1，组元素数量为数组数量，就是一个插入排序
*/
// 希尔排序其实就是利用了插入排序在元素量小、部分元素已经有序的情况下效率高进行的优化
// 增量选择希尔增量(折半处理)
func ShellSort(a []int) {
	d := len(a) / 2 // 增量

	for d >= 1 { // 折半直到增量为 1, 此时大半元素已经有序
		for x := 0; x < d; x++ { // d 个分组
			// 每个分组进行插入排序
			for i := x + d; i < len(a); i = i + d { // 待选元素
				insertVal := a[i]
				j := i - d
				for ; j >= 0 && a[j] > insertVal; j = j - d {
					a[j+d] = a[j]
				}
				a[j+d] = insertVal
			}
		}
		d = d / 2 // 折半
	}
}
