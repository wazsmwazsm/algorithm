package sort

// InsertSort 插入排序 O(n) O(1) 稳定
// 从第一个元素开始维护一个有序区, 逐个把后面元素插入到有序区的合适位置
// 扩大有序区时将原有序区的元素连续向后赋值(直到找到合适位置)避免不必要的交换
func InsertSort(a []int) {
	for i := 1; i < len(a); i++ { // 从 1 开始 0 已经是有序区元素
		insertVal := a[i]                       // 当前元素作为待插入有序区的元素（保存好放置后面移动元素被覆盖）
		j := i - 1                              // 有序区的右边界
		for ; j >= 0 && a[j] > insertVal; j-- { // 边找合适的位置边将原有序区的元素往后移一步
			a[j+1] = a[j]
		}
		// 找到合适位置, 插入
		a[j+1] = insertVal // 当前的 a[j] 不用动, j+1 正是往后移动空出的位置
	}
}
